{
  "always_run_in_app" : false,
  "icon" : {
    "color" : "teal",
    "glyph" : "magic"
  },
  "name" : "Inzidenz neu",
  "script" : "\/\/ Variables used by Scriptable.\n\/\/ These must be at the very top of the file. Do not edit.\n\/\/ icon-color: deep-gray; icon-glyph: magic;\n\/\/ Licence: Robert Koch-Institut (RKI), dl-de\/by-2-0\nconst apiUrl = (location) => `https:\/\/services7.arcgis.com\/mOBPykOjAyBO2ZKk\/arcgis\/rest\/services\/RKI_Landkreisdaten\/FeatureServer\/0\/query?where=1%3D1&outFields=BL,cases,cases7_per_100k,cases7_bl_per_100k,GEN,county,last_update&geometry=${location.longitude.toFixed(3)}%2C${location.latitude.toFixed(3)}&geometryType=esriGeometryPoint&inSR=4326&spatialRel=esriSpatialRelWithin&returnGeometry=false&outSR=4326&f=json`\n\nconst INCIDENCE_CRITICAL = 50;\nconst INCIDENCE_WARN = 35;\n\nconst BUNDESLAENDER_SHORT = {\n  'Baden-WÃ¼rttemberg': 'BW',\n  'Bayern': 'BY',\n  'Berlin': 'BE',\n  'Brandenburg': 'BB',\n  'Bremen': 'HB',\n  'Hamburg': 'HH',\n  'Hessen': 'HE',\n  'Mecklenburg-Vorpommern': 'MV',\n  'Niedersachsen': 'NI',\n  'Nordrhein-Westfalen': 'NRW',\n  'Rheinland-Pfalz': 'RLP',\n  'Saarland': 'SL',\n  'Sachsen': 'SN',\n  'Sachsen-Anhalt': 'ST',\n  'Schleswig-Holstein': 'SH',\n  'ThÃ¼ringen': 'TH'\n}\n\nconst getIncidenceColor = (incidence) => {\n    if (incidence >= INCIDENCE_CRITICAL) {\n        return Color.red()\n    } else if (incidence >= INCIDENCE_WARN) {\n        return Color.orange()\n    } else {\n        return Color.green()\n    }\n}\n\nlet widget = await createWidget()\n\nif (!config.runsInWidget) {\n    await widget.presentLarge()\n}\n\nScript.setWidget(widget)\nScript.complete()\n\nasync function createWidget(items) {\n    let location = {}\n    let customLandkreisName\n\n    if (args.widgetParameter) {\n        const params = args.widgetParameter.split(\",\")\n        location = {\n            latitude: parseFloat(params[0]),\n            longitude: parseFloat(params[1])\n        }\n        customLandkreisName = params[2]\n\n    } else {\n        Location.setAccuracyToThreeKilometers()\n        location = await Location.current()\n    }\n\n    const data = await new Request(apiUrl(location)).loadJSON()\n\n    if (!data || !data.features || !data.features.length) {\n        const errorList = new ListWidget()\n        errorList.addText(\"Keine Ergebnisse fÃ¼r den aktuellen Ort gefunden.\")\n        return errorList\n    }\n\n    const attributes = data.features[0].attributes\n    const lastUpdated = attributes.last_update\n    const incidenceLandkreis = attributes.cases7_per_100k.toFixed(1)\n    const incidenceBundesland = attributes.cases7_bl_per_100k.toFixed(1)\n    const casesLandkreis = attributes.cases\n    const bundeslandName = BUNDESLAENDER_SHORT[attributes.BL]\n    const landkreisBezeichnung = attributes.county\n    const isKreisfreieStadt = !!landkreisBezeichnung.match(\/^SK \\w+$\/)\n    const landkreisName = customLandkreisName || attributes.GEN\n    \n    const list = new ListWidget()\n\n    const header = list.addText(`ðŸ¦  INZIDENZ`)\n    header.font = Font.mediumSystemFont(13)\n\n    list.addSpacer()\n    \n    const mainContent = list.addStack()\n    mainContent.layoutHorizontally()\n    mainContent.useDefaultPadding()\n    mainContent.centerAlignContent()\n\n    const incidenceLabel = mainContent.addText(`${incidenceLandkreis}`)\n    incidenceLabel.font = Font.boldSystemFont(24)\n    incidenceLabel.textColor = getIncidenceColor(incidenceLandkreis)\n    const casesLandkreisLabel = mainContent.addText(` (${casesLandkreis})`)\n    casesLandkreisLabel.font = Font.systemFont(14)\n    casesLandkreisLabel.textColor = Color.gray()\n    \n    list.addText(landkreisName)\n  \n    if (isKreisfreieStadt) {\n      list.addText('(Stadt)')\n    }\n    list.addSpacer()\n\n    const line = list.addStack()\n    line.layoutHorizontally()\n    line.useDefaultPadding()\n    const bl_incidence = line.addText(`${incidenceBundesland}`)\n    bl_incidence.font = Font.boldSystemFont(14)\n    bl_incidence.textColor = getIncidenceColor(incidenceBundesland)\n    const bundeslandLabel = line.addText(` ${bundeslandName}`)\n    bundeslandLabel.font = Font.systemFont(14)\n    bundeslandLabel.textColor = Color.gray()\n    const updateLabel = list.addText(`Stand: ${lastUpdated.substr(0,10)}`)\n    updateLabel.font = Font.systemFont(10)\n    updateLabel.textColor = Color.gray()\n\n    return list\n}",
  "share_sheet_inputs" : [

  ]
}
